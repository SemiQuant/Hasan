"0","import pysam
from collections import Counter
import pandas as pd
samfile = pysam.AlignmentFile(""/Users/SemiQuant/Downloads/BDQ_haplo/TB-B240-054_S26-bowtie2.bam"", ""rb"")

# var_dic will be snps/indels, if also adding reference then edit the below
# import numpy as np
# vant = np.loadtxt(""/Users/SemiQuant/Bioinformatics/Projects/Hasan/snps.tsv"", delimiter=""\t"", 
#           dtype={'names': ('CHROM', 'POS', 'REF', 'ALT', 'TYPE'),
#           'formats': ('<U100', 'int', 'U10', 'U10', 'U10')}, skiprows=1)
var_dic = {}
# this is gross, but i dont really speak python 
with open(""/Users/SemiQuant/Bioinformatics/Projects/Hasan/snps.tsv"") as f:
    next(f) # skip header line
    for line in f:
        (CHROM, POS, REF, ALT, TYPE) = line.split()
        try:
            var_dic[CHROM][int(POS)].setdefault('call', []).append(ALT)
        except:
            try:
                var_dic[CHROM][int(POS)] = {'call' : [ALT]}
            except:
                var_dic[CHROM] = {int(POS) : {'call' : [ALT]}}

# var_dic={'rpoC': {1221: {'call': ['T']}}, 'Rv0678_amplicon4': {111: {'call': ['A', 'G', 'G', 'T']}, 112: {'call': ['G', '-']}, 114: {'call': ['C']}, 116: {'call': ['C']}}}var_dic={'rpoC': {1221: {'call': ['T']}}, 'Rv0678_amplicon4': {111: {'call': ['A', 'G', 'G', 'T']}, 112: {'call': ['G', '-']}, 114: {'call': ['C']}, 116: {'call': ['C']}}}

# this is like this as I dont really know pysam and how to do it cleaner, with also getting readnames
for chrom in var_dic:
    if chrom not in samfile.references:
        print(chrom, "" not found in bam file!"")
    else:
        for i in var_dic[chrom]:
            for pileupcolumn in samfile.pileup(chrom, i, i+1):
                for pileupread in pileupcolumn.pileups:
                    if pileupread.query_position == i:
                        if not pileupread.is_del: # if reference then add
                            read_call_tmp = pileupread.alignment.query_sequence[pileupread.query_position]
                            try:
                                #  check if it matches the call in there as pairs have same name
                                if read_call_tmp == var_dic[chrom][i][pileupread.alignment.query_name]:
                                    break
                                else:
                                    var_dic[chrom][i][pileupread.alignment.query_name] = ""N""
                            except:
                                if pileupread.is_refskip == 0: # if reference then add, not sure if this is working
                                    var_dic[chrom][i][pileupread.alignment.query_name] = read_call_tmp
                                elif read_call_tmp in var_dic[chrom][i][""call""]:
                                    var_dic[chrom][i][pileupread.alignment.query_name] = read_call_tmp
                                else:
                                    var_dic[chrom][i][pileupread.alignment.query_name] = ""N""
                        else:
                            try:
                                #  check if it matches the call in there as pairs have same name
                                if read_call_tmp == var_dic[chrom][i][pileupread.alignment.query_name]:
                                    break
                                else:
                                    var_dic[chrom][i][pileupread.alignment.query_name] = ""N""
                            except:
                                if read_call_tmp == var_dic[chrom][i][pileupread.alignment.query_name]:
                                    break
                                else:
                                    var_dic[chrom][i][pileupread.alignment.query_name] = ""-""

# var_df = pd.DataFrame.from_dict(var_dic)
# var_df.reset_index(drop=True, inplace=True)
# var_df = var_df[1:]
var_df = pd.DataFrame.from_dict({(i,j): var_dic[i][j] 
                           for i in var_dic.keys() 
                           for j in var_dic[i].keys()},
                       orient='columns')
var_df.columns = var_df.columns.to_flat_index()
# var_df.columns = [' '.join(str(col)).strip() for col in var_df.columns.values]
var_df = var_df[1:]

# make this happen in the above rather
cnms = []
for col in var_df.columns.values:
    cnms.append(col[0] + ""_"" + str(col[1]))
var_df.columns = cnms
"
